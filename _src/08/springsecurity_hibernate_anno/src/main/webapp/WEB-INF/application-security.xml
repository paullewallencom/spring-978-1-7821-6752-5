<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
	http://www.springframework.org/schema/security
	http://www.springframework.org/schema/security/spring-security-3.1.xsd">
	
	<global-method-security pre-post-annotations="enabled" />
	
	<http auto-config="false"  use-expressions="true">
		<intercept-url pattern="/login" access="permitAll" />
		<intercept-url pattern="/logout" access="permitAll" />
		<intercept-url pattern="/accessdenied" access="permitAll" />
		<intercept-url pattern="/list" access="hasRole('ROLE_EDITOR')" />
                <intercept-url pattern="/add" access="hasRole('ROLE_EDITOR')" />
		<form-login login-page="/login" default-target-url="/list" authentication-failure-url="/accessdenied" />
		<logout logout-success-url="/logout" />
	</http>

	<authentication-manager alias="authenticationManager">
        <authentication-provider>
              <jdbc-user-service data-source-ref="tenant1DataSource"
            users-by-username-query=" select username,password ,'true' as enabled from users where username=?"  
		   authorities-by-username-query=" 
		      select u.username as username, ur.authority as authority from users u, user_roles ur  
	      where u.user_id = ur.user_id and u.username =?"
         /> 
        </authentication-provider>
    </authentication-manager>
    
    <beans:bean id="horrorMovieDAO" class="com.packt.springsecurity.dao.HorrorMovieDaoImpl" />
    <beans:bean id="horrorMovieManager" class="com.packt.springsecurity.service.HorrorMovieManagerImpl" />
    

</beans:beans>